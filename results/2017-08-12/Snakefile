data_root = "~/Data/id/0c31ce4c6763d8ec2abccafe6bde2fa0bed8124d"
workdir: "wd"
include: 'deriv.snakemake'

grav = 9.81
cp = 1004
Lc = 2.5104e6
rho0 = 1.19

@wrap_xarray_calculation
def liquid_water_temperature(t, qn, qp):
    """This is an approximate calculation neglecting ice and snow
    """

    return t + grav/cp * t.z - Lc/cp * (qp + qn)/1000.0

@wrap_xarray_calculation
def total_water(qv, qn):
    return qv + qn

rule link_data:
    output: "stat.nc"
    shell: "ln -s {data_root}/data/stat.nc stat.nc"

rule coarse_grain:
    output: "A{m}/{n}d/{field}.nc"
    run:
        m = int(wildcards.m)

        data_path = os.path.join(data_root, f'data/{wildcards.n}d',
                                 wildcards.field + '.nc')
        xopen(data_path)[wildcards.field]\
            .pipe(lambda x: coarsen(x, x=m))\
            .to_netcdf(output[0])

rule liquid_water:
    input: T="A64/3d/TABS.nc",
           qn="A64/3d/QN.nc",
           qp="A64/3d/QP.nc",
           qv="A64/3d/QV.nc",
           u="A64/3d/U.nc",
           w="A64/3d/W.nc"
    output: sl="calc/sl.nc", qt="calc/qt.nc", u="calc/U.nc", w="calc/W.nc"
    run:
        sl = liquid_water_temperature(input.T, input.qn, input.qp)
        sl.to_dataset(name="sl").to_netcdf(output.sl)

        qt = total_water(input.qv, input.qn)\
               .to_dataset(name="qt")\
               .to_netcdf(output.qt)

        # need to link files for computing total derivatives
        shell("ln -s  ../{input.u} {output.u}")
        shell("ln -s  ../{input.w} {output.w}")

rule apparent_heating:
    input: dsl="M/calc/sl.nc", stat="stat.nc"
    output: "calc/q1.nc"
    run:
        dsl = xr.open_dataset(input.dsl).sl
        ttend = xr.open_dataset(input.stat).TTEND.reindex_like(dsl, method='nearest')
        # need to translate from K/s to K/d
        q1 = (dsl - ttend/86400.0) * 86400
        q1.attrs['units'] = 'K/d'
        q1.to_dataset(name="q1").to_netcdf(output[0])

rule apparent_moistening:
    input: dqt="M/calc/qt.nc", stat="stat.nc"
    output: "calc/q2.nc"
    run:
        dqt = xr.open_dataset(input.dqt).qt
        tend = xr.open_dataset(input.stat).QTEND.reindex_like(dqt, method='nearest')
        scal  = 86400/1000 * Lc/cp
        # need to translate from g/kg/s to K/day
        q2 = (dqt - tend/86400.0)*scal
        q2.attrs['units'] = 'K/d'
        q2.to_dataset(name="q2").to_netcdf(output[0])

rule maximum_cov_analysis:
    input: q1="calc/q1.nc", q2="calc/q2.nc",
           sl="calc/sl.nc", qt="calc/qt.nc",
           stat="stat.nc"
    output: "calc/mca.nc"
    script: "mca.py"
