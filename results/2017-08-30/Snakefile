import numpy as np
from scipy.interpolate import interp1d
import xarray as xr
from gnl.xarray import map_overlap
import dask.array as da
from dask.array.core import atop
from dask import delayed

workdir: "wd"
include: "sam.rules"

data = "/home/disk/eos4/nbren12/Data/id/880e581fd387681d0b91fde66e14903c2a0d8bf8/data"

@wrap_xarray_calculation
def source(x, f):
    dt = float(x.time[1] - x.time[0])
    return x.shift(time=-1) - dt/2 * (f.shift(time=-1) + f)
    
rule inputs:
    input: "calc/qt.nc", "calc/sl.nc", "A64/2d/LHF.nc", "A64/2d/Prec.nc"
    output: "ml/X.nc"
    run:
        xr.merge((xopena(f) for f in input), join='inner')\
          .to_netcdf(output[0])

rule outputs:
    input: qt="calc/qt.nc", sl="calc/sl.nc", aqt="adv/calc/qt.nc", asl="adv/calc/sl.nc"
    output: Y="ml/Y.nc"
    run:
        y_qt = source(input.qt, input.aqt)
        y_sl = source(input.sl, input.asl)

        xr.Dataset({'qt':y_qt, 'sl': y_sl}).to_netcdf(output.Y)
