import numpy as np
from scipy.interpolate import interp1d
import xarray as xr
from gnl.xarray import map_overlap
import dask.array as da
from dask.array.core import atop
from dask import delayed

workdir: "wd"
include: "sam.rules"

data = "/home/disk/eos4/nbren12/Data/id/880e581fd387681d0b91fde66e14903c2a0d8bf8/data"


rule xgrid:
    input:  "{f}.nc", c="A64/3d/QV.nc"
    output: "x/{f}.nc"
    shell:
        """
        ncks -d x,,,64 -o {output} {input[0]}
        ncks -A -v x -o {output} {input.c}
        """




rule residual:
    input: x="xadv/QV.nc", z="zadv/A64/3d/QV.nc", y="A64/3d/QV.nc"
    output: "B/QV.nc"
    run:
        x= xopena(input.x)
        z= xopena(input.z)
        y = xopena(input.y)

        if x.time.units != 'd':
            raise ValueError("The time dimension must have units 'd'")
        dt = (x.time[1] - x.time[0])*3600

        g = z + x

        out = (y - dt * g)
        out.attrs['units'] = y.units
        out.to_netcdf(output[0])



